/* --== SET UP PRIVILEGE ==-- */
GRANT ALL PRIVILEGE TO SOME;
GRANT ALL PRIVILEGE TO RTL_A;
GRANT ALL PRIVILEGE TO RTL_B;

/* BEFORE create user 'SOME' AFTER => */
/* first login with RTL_A and run, then login and run by RTL_B*/
GRANT CREATE ANY PROCEDURE TO SOME;
GRANT CREATE ANY SEQUENCE TO SOME;
GRANT CREATE ANY TABLE TO SOME;
GRANT CREATE ANY TRIGGER TO SOME;
GRANT CREATE ANY VIEW TO SOME;
GRANT CREATE ANY INDEX TO SOME;
GRANT DELETE ANY TABLE TO SOME;
GRANT DROP ANY PROCEDURE TO SOME;
GRANT DROP ANY SEQUENCE TO SOME;
GRANT DROP ANY TABLE TO SOME;
GRANT DROP ANY TRIGGER TO SOME;
GRANT DROP ANY VIEW TO SOME;
GRANT DROP ANY INDEX TO SOME;
GRANT EXECUTE ANY PROCEDURE TO SOME;
GRANT GRANT ANY PRIVILEGE TO SOME;
GRANT GRANT ANY ROLE TO SOME;
GRANT INSERT ANY TABLE TO SOME;
GRANT UPDATE ANY TABLE TO SOME;
GRANT LOCK ANY TABLE TO SOME;
GRANT SELECT ANY TABLE TO SOME;
GRANT SELECT ANY SEQUENCE TO SOME;

/* DROP ALL */
DROP TABLE SOME.TRANSMITING_LOG;

DROP TABLE RTL_A.TRANSMITING_ADDRESS;
DROP TABLE RTL_A.TRANSMITING_CERTIFICATE;
DROP TABLE RTL_A.TRANSMITING_CONTACT;
DROP TABLE RTL_A.TRANSMITING_CUSTOMER;
DROP TABLE RTL_A.CUSTOMER_SYNCHRONIZE;
DROP TABLE RTL_A.CUSTOMER_ADDRESS;
DROP TABLE RTL_A.CUSTOMER_CERTIFICATE;
DROP TABLE RTL_A.CUSTOMER_CONTACT;
DROP TABLE RTL_A.CUSTOMER;

DROP TABLE RTL_B.TRANSMITING_ADDRESS;
DROP TABLE RTL_B.TRANSMITING_CERTIFICATE;
DROP TABLE RTL_B.TRANSMITING_CONTACT;
DROP TABLE RTL_B.TRANSMITING_CUSTOMER;
DROP TABLE RTL_B.CUSTOMER_SYNCHRONIZE;
DROP TABLE RTL_B.CUSTOMER_ADDRESS;
DROP TABLE RTL_B.CUSTOMER_CERTIFICATE;
DROP TABLE RTL_B.CUSTOMER_CONTACT;
DROP TABLE RTL_B.CUSTOMER;

DROP SEQUENCE SOME.TRANSMITING_LOG_SEQ;
DROP SEQUENCE SOME.TRANSMITING_RUN_SEQ;

DROP SEQUENCE RTL_A.CUSTOMER_SYNCHRONIZE_SEQ;
DROP SEQUENCE RTL_A.CUSTOMER_ADDRESS_SEQ;
DROP SEQUENCE RTL_A.CUSTOMER_CERTIFICATE_SEQ;
DROP SEQUENCE RTL_A.CUSTOMER_CONTACT_SEQ;
DROP SEQUENCE RTL_A.CUSTOMER_SEQ;

DROP SEQUENCE RTL_B.CUSTOMER_SYNCHRONIZE_SEQ;
DROP SEQUENCE RTL_B.CUSTOMER_ADDRESS_SEQ;
DROP SEQUENCE RTL_B.CUSTOMER_CERTIFICATE_SEQ;
DROP SEQUENCE RTL_B.CUSTOMER_CONTACT_SEQ;
DROP SEQUENCE RTL_B.CUSTOMER_SEQ;

/* --== SET UP DDL ==-- */

/* SOME */

/* SOME.TRANSMITING_LOG */

CREATE SEQUENCE SOME.TRANSMITING_LOG_SEQ START WITH 1;
CREATE SEQUENCE SOME.TRANSMITING_RUN_SEQ START WITH 1;

CREATE TABLE SOME.TRANSMITING_LOG
(
    ID NUMBER(*) PRIMARY KEY NOT NULL,
    RUN_NUMBER NUMBER(*),
    MESSAGE VARCHAR(4000),
    ADDITIONAL_INFORMATION CLOB,
    INSERT_TIMESTAMP TIMESTAMP(6) WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
);

/* RTL_A */

CREATE SEQUENCE RTL_A.CUSTOMER_SEQ START WITH 1;
CREATE SEQUENCE RTL_A.CUSTOMER_ADDRESS_SEQ START WITH 1;
CREATE SEQUENCE RTL_A.CUSTOMER_CERTIFICATE_SEQ START WITH 1;
CREATE SEQUENCE RTL_A.CUSTOMER_CONTACT_SEQ START WITH 1;
CREATE SEQUENCE RTL_A.CUSTOMER_SYNCHRONIZE_SEQ START WITH 1;

CREATE TABLE RTL_A.CUSTOMER
(
    ID NUMBER(*) PRIMARY KEY NOT NULL,
    TITLE VARCHAR2(4000),
    CODE CHAR(100),
    INSERT_TIMESTAMP TIMESTAMP(6) WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
);
CREATE UNIQUE INDEX RTL_A.UX_CUSTOMER_CODE ON RTL_A.CUSTOMER (CODE);

CREATE TABLE RTL_A.CUSTOMER_ADDRESS
(
    ID NUMBER(*) PRIMARY KEY NOT NULL,
    ADDRESS VARCHAR2(4000),
    CUSTOMER_ID NUMBER(*) NOT NULL,
    INSERT_TIMESTAMP TIMESTAMP(6) WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP ,
    CONSTRAINT FK_CUSTOMER_ADDRESS_CUSTOMER FOREIGN KEY (CUSTOMER_ID) REFERENCES RTL_A.CUSTOMER (ID)
);
CREATE INDEX RTL_A.IX_CUSTOMER_ADDRESS_CUSTOMER ON RTL_A.CUSTOMER_ADDRESS (CUSTOMER_ID);

CREATE TABLE RTL_A.CUSTOMER_CERTIFICATE
(
    ID NUMBER(*) PRIMARY KEY NOT NULL,
    CERTIFICATE VARCHAR2(4000),
    CUSTOMER_ID NUMBER(*) NOT NULL,
    INSERT_TIMESTAMP TIMESTAMP(6) WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP ,
    CONSTRAINT FK_CUSTOMER_CERTIFICATE_CUSTOM FOREIGN KEY (CUSTOMER_ID) REFERENCES RTL_A.CUSTOMER (ID)
);
CREATE INDEX RTL_A.IX_CUSTOMER_CERTIFICATE_CUSTOM ON RTL_A.CUSTOMER_CERTIFICATE (CUSTOMER_ID);

CREATE TABLE RTL_A.CUSTOMER_CONTACT
(
    ID NUMBER(*) PRIMARY KEY NOT NULL,
    CONTACT VARCHAR2(4000),
    CUSTOMER_ID NUMBER(*) NOT NULL,
    INSERT_TIMESTAMP TIMESTAMP(6) WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP ,
    CONSTRAINT FK_CUSTOMER_CONTACT_CUSTOM FOREIGN KEY (CUSTOMER_ID) REFERENCES RTL_A.CUSTOMER (ID)
);
CREATE INDEX RTL_A.IX_CUSTOMER_CONTACT_CUSTOMER ON RTL_A.CUSTOMER_CONTACT (CUSTOMER_ID);

CREATE TABLE RTL_A.CUSTOMER_SYNCHRONIZE
(
    ID NUMBER(*) PRIMARY KEY NOT NULL,
    CUSTOMER_CODE CHAR(100),
    SYNCHRONIZE_STATUS CHAR(100),
    INSERT_TIMESTAMP TIMESTAMP(6) WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
);
CREATE INDEX RTL_A.IX_CUSTOMER_SYNCHRONIZE_C_CODE ON RTL_A.CUSTOMER_SYNCHRONIZE (CUSTOMER_CODE);
CREATE INDEX RTL_A.IX_CUSTOMER_SYNCHRONIZE_STATUS ON RTL_A.CUSTOMER_SYNCHRONIZE (SYNCHRONIZE_STATUS);

CREATE GLOBAL TEMPORARY TABLE RTL_A.TRANSMITING_CUSTOMER
(
       TITLE VARCHAR2(4000),
       SYNCHRONIZE_ROWID UROWID NOT NULL
)
ON COMMIT PRESERVE ROWS;

CREATE GLOBAL TEMPORARY TABLE RTL_A.TRANSMITING_ADDRESS
(
       ADDRESS VARCHAR2(4000),
       SYNCHRONIZE_ROWID UROWID NOT NULL
)
ON COMMIT PRESERVE ROWS;

CREATE GLOBAL TEMPORARY TABLE RTL_A.TRANSMITING_CERTIFICATE
(
       CERTIFICATE VARCHAR2(4000),
       SYNCHRONIZE_ROWID UROWID NOT NULL
)
ON COMMIT PRESERVE ROWS;

CREATE GLOBAL TEMPORARY TABLE RTL_A.TRANSMITING_CONTACT
(
       CONTACT VARCHAR2(4000),
       SYNCHRONIZE_ROWID UROWID NOT NULL
)
ON COMMIT PRESERVE ROWS;

ALTER TABLE RTL_A.CUSTOMER
  ADD CONSTRAINT C_CUSTOMER_CODE_UNIQ UNIQUE (CODE);

ALTER TABLE RTL_A.CUSTOMER_SYNCHRONIZE
  ADD CONSTRAINT FK_CUSTOMER_SYNCHRONIZE_C_CODE
FOREIGN KEY (CUSTOMER_CODE) REFERENCES RTL_A.CUSTOMER (CODE);


/* RTL_B*/

CREATE SEQUENCE RTL_B.CUSTOMER_SYNCHRONIZE_SEQ START WITH 1;
CREATE SEQUENCE RTL_B.CUSTOMER_ADDRESS_SEQ START WITH 1;
CREATE SEQUENCE RTL_B.CUSTOMER_CERTIFICATE_SEQ START WITH 1;
CREATE SEQUENCE RTL_B.CUSTOMER_CONTACT_SEQ START WITH 1;
CREATE SEQUENCE RTL_B.CUSTOMER_SEQ START WITH 1;

CREATE TABLE RTL_B.CUSTOMER
(
    ID NUMBER(*) PRIMARY KEY NOT NULL,
    TITLE VARCHAR2(4000),
    CODE CHAR(100),
    INSERT_TIMESTAMP TIMESTAMP(6) WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
);
CREATE UNIQUE INDEX RTL_B.UX_CUSTOMER_CODE ON RTL_B.CUSTOMER (CODE);

CREATE TABLE RTL_B.CUSTOMER_ADDRESS
(
    ID NUMBER(*) PRIMARY KEY NOT NULL,
    ADDRESS VARCHAR2(4000),
    CUSTOMER_ID NUMBER(*) NOT NULL,
    INSERT_TIMESTAMP TIMESTAMP(6) WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP ,
    CONSTRAINT FK_CUSTOMER_ADDRESS_CUSTOMER FOREIGN KEY (CUSTOMER_ID) REFERENCES RTL_B.CUSTOMER (ID)
);
CREATE INDEX RTL_B.IX_CUSTOMER_ADDRESS_CUSTOMER ON RTL_B.CUSTOMER_ADDRESS (CUSTOMER_ID);

CREATE TABLE RTL_B.CUSTOMER_CERTIFICATE
(
    ID NUMBER(*) PRIMARY KEY NOT NULL,
    CERTIFICATE VARCHAR2(4000),
    CUSTOMER_ID NUMBER(*) NOT NULL,
    INSERT_TIMESTAMP TIMESTAMP(6) WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP ,
    CONSTRAINT FK_CUSTOMER_CERTIFICATE_CUSTOM FOREIGN KEY (CUSTOMER_ID) REFERENCES RTL_B.CUSTOMER (ID)
);
CREATE INDEX RTL_B.IX_CUSTOMER_CERTIFICATE_CUSTOM ON RTL_B.CUSTOMER_CERTIFICATE (CUSTOMER_ID);

CREATE TABLE RTL_B.CUSTOMER_CONTACT
(
    ID NUMBER(*) PRIMARY KEY NOT NULL,
    CONTACT VARCHAR2(4000),
    CUSTOMER_ID NUMBER(*) NOT NULL,
    INSERT_TIMESTAMP TIMESTAMP(6) WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP ,
    CONSTRAINT FK_CUSTOMER_CONTACT_CUSTOM FOREIGN KEY (CUSTOMER_ID) REFERENCES RTL_B.CUSTOMER (ID)
);
CREATE INDEX RTL_B.IX_CUSTOMER_CONTACT_CUSTOMER ON RTL_B.CUSTOMER_CONTACT (CUSTOMER_ID);

CREATE TABLE RTL_B.CUSTOMER_SYNCHRONIZE
(
    ID NUMBER(*) PRIMARY KEY NOT NULL,
    CUSTOMER_CODE CHAR(100),
    SYNCHRONIZE_STATUS CHAR(100),
    INSERT_TIMESTAMP TIMESTAMP(6) WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
);
CREATE INDEX RTL_B.IX_CUSTOMER_SYNCHRONIZE_C_CODE ON RTL_B.CUSTOMER_SYNCHRONIZE (CUSTOMER_CODE);
CREATE INDEX RTL_B.IX_CUSTOMER_SYNCHRONIZE_STATUS ON RTL_B.CUSTOMER_SYNCHRONIZE (SYNCHRONIZE_STATUS);

CREATE GLOBAL TEMPORARY TABLE RTL_B.TRANSMITING_CUSTOMER
(
       TITLE VARCHAR2(4000),
       SYNCHRONIZE_ROWID UROWID NOT NULL
)
ON COMMIT PRESERVE ROWS;

CREATE GLOBAL TEMPORARY TABLE RTL_B.TRANSMITING_ADDRESS
(
       ADDRESS VARCHAR2(4000),
       SYNCHRONIZE_ROWID UROWID NOT NULL
)
ON COMMIT PRESERVE ROWS;

CREATE GLOBAL TEMPORARY TABLE RTL_B.TRANSMITING_CERTIFICATE
(
       CERTIFICATE VARCHAR2(4000),
       SYNCHRONIZE_ROWID UROWID NOT NULL
)
ON COMMIT PRESERVE ROWS;

CREATE GLOBAL TEMPORARY TABLE RTL_B.TRANSMITING_CONTACT
(
       CONTACT VARCHAR2(4000),
       SYNCHRONIZE_ROWID UROWID NOT NULL
)
ON COMMIT PRESERVE ROWS;

ALTER TABLE RTL_B.CUSTOMER
  ADD CONSTRAINT C_CUSTOMER_CODE_UNIQ UNIQUE (CODE);

ALTER TABLE RTL_B.CUSTOMER_SYNCHRONIZE
  ADD CONSTRAINT FK_CUSTOMER_SYNCHRONIZE_C_CODE
FOREIGN KEY (CUSTOMER_CODE) REFERENCES RTL_B.CUSTOMER (CODE);


/* --==TRIGGER==-- */

CREATE OR REPLACE TRIGGER SOME.TRANSMITING_LOG_BIR
BEFORE INSERT ON SOME.TRANSMITING_LOG
FOR EACH ROW

  BEGIN
    SELECT SOME.TRANSMITING_LOG_SEQ.NEXTVAL
    INTO :new.ID
    FROM DUAL;
  END;

CREATE OR REPLACE TRIGGER RTL_A.CUSTOMER_BIR
BEFORE INSERT ON RTL_A.CUSTOMER
FOR EACH ROW

  BEGIN
    SELECT RTL_A.CUSTOMER_SEQ.NEXTVAL
    INTO :new.ID
    FROM DUAL;
  END;

CREATE OR REPLACE TRIGGER RTL_A.CUSTOMER_CONTACT_BIR
BEFORE INSERT ON RTL_A.CUSTOMER_CONTACT
FOR EACH ROW

  BEGIN
    SELECT RTL_A.CUSTOMER_CONTACT_SEQ.NEXTVAL
    INTO :new.ID
    FROM DUAL;
  END;

CREATE OR REPLACE TRIGGER RTL_A.CUSTOMER_CERTIFICATE_BIR
BEFORE INSERT ON RTL_A.CUSTOMER_CERTIFICATE
FOR EACH ROW

  BEGIN
    SELECT RTL_A.CUSTOMER_CERTIFICATE_SEQ.NEXTVAL
    INTO :new.ID
    FROM DUAL;
  END;

CREATE OR REPLACE TRIGGER RTL_A.CUSTOMER_ADDRESS_BIR
BEFORE INSERT ON RTL_A.CUSTOMER_ADDRESS
FOR EACH ROW

  BEGIN
    SELECT RTL_A.CUSTOMER_ADDRESS_SEQ.NEXTVAL
    INTO :new.ID
    FROM DUAL;
  END;

CREATE OR REPLACE TRIGGER RTL_A.CUSTOMER_SYNCHRONIZE
BEFORE INSERT ON RTL_A.CUSTOMER_SYNCHRONIZE
FOR EACH ROW

  BEGIN
    SELECT RTL_A.CUSTOMER_SYNCHRONIZE_SEQ.NEXTVAL
    INTO :new.ID
    FROM DUAL;
  END;

CREATE OR REPLACE TRIGGER RTL_B.CUSTOMER_BIR
BEFORE INSERT ON RTL_B.CUSTOMER
FOR EACH ROW

  BEGIN
    SELECT RTL_B.CUSTOMER_SEQ.NEXTVAL
    INTO :new.ID
    FROM DUAL;
  END;

CREATE OR REPLACE TRIGGER RTL_B.CUSTOMER_CONTACT_BIR
BEFORE INSERT ON RTL_B.CUSTOMER_CONTACT
FOR EACH ROW

  BEGIN
    SELECT RTL_B.CUSTOMER_CONTACT_SEQ.NEXTVAL
    INTO :new.ID
    FROM DUAL;
  END;

CREATE OR REPLACE TRIGGER RTL_B.CUSTOMER_CERTIFICATE_BIR
BEFORE INSERT ON RTL_B.CUSTOMER_CERTIFICATE
FOR EACH ROW

  BEGIN
    SELECT RTL_B.CUSTOMER_CERTIFICATE_SEQ.NEXTVAL
    INTO :new.ID
    FROM DUAL;
  END;

CREATE OR REPLACE TRIGGER RTL_B.CUSTOMER_ADDRESS_BIR
BEFORE INSERT ON RTL_B.CUSTOMER_ADDRESS
FOR EACH ROW

  BEGIN
    SELECT RTL_B.CUSTOMER_ADDRESS_SEQ.NEXTVAL
    INTO :new.ID
    FROM DUAL;
  END;

CREATE OR REPLACE TRIGGER RTL_B.CUSTOMER_SYNCHRONIZE
BEFORE INSERT ON RTL_B.CUSTOMER_SYNCHRONIZE
FOR EACH ROW

  BEGIN
    SELECT RTL_B.CUSTOMER_SYNCHRONIZE_SEQ.NEXTVAL
    INTO :new.ID
    FROM DUAL;
  END;
