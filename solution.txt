ПОЯСНИТЕЛЬНАЯ ЗАПИСКА

По оценке постановщика, задача решается за 4 часа и выполнение задачи подразумевает набросок архитектуры, 
исходя из этого многие "мелочи" не продуманы и не прописаны.
На выполнение задания ушло 24 часа.

Исходные данные

Имеют следующие сущности :
Клиент
наименование
уникальный код клиента

Адрес клиента:
адрес

Удостоверение клиента:
удостоверение

Контакт клиента
контакт

Сущности храняться в идентичных по структуре базах ("Первая" и "Вторая").
Необходим механизм для добавления определённых сущностей Клиент из одной базы в другую.
Механизм не должен блокировать данные сущностей в какой либо базе.

Решение

Добавить в каждую базу таблицу "Клиенты для передачи" со списком Клиентов для передачи.
В "Клиентах для передачи" хранить уникальный код клиента и статус процесса передачи.
Добавить на сервере СУБД отдельную схему "Передатчик" для управления процессом передачи.

Пользователи "Первой" и "Второй" баз определяют каких бы клиентов они хотели передать.
С помощью хранимой процедуры "Добавить для передачи" записывают данные необходимых клиентов 
( уникальный код) в таблицу "Клиенты для передачи", "Убрать из передачи" - отменяют передачу клиента ( стутус "Отмена").
СУБД по заданию планировщика или в ручном режиме выполняет хранимую процедуру 
"Передать клиентов" базы "Передатчик" для передачи необходимых клиентов.
Пользователи для получения информации о состоянии процесса передачи используют хранимую процедуру 
"Смотреть статус Передачи" базы "Передатчик", которая принимает либо уникальный код клиента, либо диапазон дат добавления клиентов 
и выдаёт пары "код клиента" и "статус передачи".
Пользователи могут получить информацию об ошибках передачи с помощью хранимой процедуры "Смотреть ошибки Передачи"
базы "Передатчик".

Реализация
Процедуры:
"Добавить для передачи",
"Убрать из передачи",
"Смотреть статус Передачи",
"Смотреть ошибки Передачи"
на вкус исполнителя тривиальны, поэтому не описаны :)

Хранимая процедура "Передать клиентов"

Процедура делает "снимок" данных для передачи во временные таблицы, 
и из этих таблиц данные переписывает в целевую базу. Таким образом данные передаются по состоянию 
на момент передачи, если в процессе передачи данные будут изменены, то это не будет отражено.
Ошибки выполнения записываются в "Журнал передачи", каждый запуск процедуры генерируются уникальный номер запуска 
и все записи "Журнала" сопровождаютсяэ тим номером.

Специальной обработки ошибок не предусмотрено, есть сохранение ошибок при выполнеии процедуры, 
но эти ошибки не обрабатываются и соответственно выполнение процедуры прекращается.
И есть обработка ошибок в форме сохранения информации об этих ошибках, при этом выполнение процедуры не прекращается.
Так обрабатываются следующие ошибки:
ошибка установки статуса "Инициализация" - 'INITIALIZE';
ошибка установки статуса "Клиент не найден" - 'NOT_FOUND';
ошибка удаления из обработки не найденных клиентов;
ошибка установки статуса "Клиент не требуется" - 'CUSTOMER_NOT_REQUIRE';
ошибка удаления из обработки клиентов которые не требуются;
ошибка установки статуса "Готов к передаче" - 'PREPARE_FOR_TRANSMIT';
ошибка добавления записи во временную таблицу адресов;
ошибка добавления записи во временную таблицу удостоверения;
ошибка добавления записи во временную таблицу контактов;
ошибка добавления записи во в целевую таблицу адресов;
ошибка добавления записи во целевую таблицу удостоверения;
ошибка добавления записи во целевую таблицу контактов;

Обработка записей выполняется одним заходом, для уменьшения потребления ресурсов, можно ввести лимит на обработку
записей на одной иттерации, или в один запуск процедуры, можно ввести лимит на выполнение 
подтверждения изменений (COMMIT).

Реализована процедуры только для передачи клиентов из "Второй" (RTL_B) базы в "Первую" (RTL_A).
Процедура для обратной перекачки получается копипастом с выполнением следующих замен :
RTL_B => RTL_X , RTL_A => RTL_B, RTL_X => RTL_A.

Так же после отработки процедуры передачи из "Второй" в "Первую", можно переписать процедуру 
на использование EXECUTE_IMMEDIATE, так что бы процедура принимала два парамтера :
1)SOURCE_SCHEMA_NAME
2)TARGET_SCHEMA_NAME
но для отладки это плохой вариант, хотя в два раза упрощает сопровождение :)
но если у нас 100500 баз, то от EXECUTE_IMMEDIATE глупо отказываться.

По сути представленная реализация является альфа версией в которую ещё много чего можно добавить 
и много что можно улучшить.

Подробный алгоритм 

1) INITIALIZE - получить номер запуска от последовательности TRANSMITING_RUN_SEQ (база "Передатчик");
2) INITIALIZE_SYNCHRONIZE - Добавить во временную талицу "Клиенты", коды клиентов для передачи;
3) С использованием SELECT FOR UPDATE в таблице "Клиенты для передачи" 
установить для выбранных клиентов статус "Инициализация";
4) удалить из временной таблицы обработки Клиентов, записи для котрых не удалось установить статус "Инициализация";
5) EXCLUDE_NOT_FOUND - удалить из временной таблицы обработки Клиентов, 
записи для которых не нашлось записей в таблице "Клиенты";
6) EXCLUDE_NOT_REQUIRE - удалить из временной таблицы обработки Клиентов, 
записи коды которых уже есть в целевой базе;
7) записать наименования для Клиентов в таблице обработки Клиентов;
8) SET_PREPARE_FOR_TRANSMIT - установить статус "Готов к передаче" в таблице "Клиенты для передачи" 
для Клиентов из таблицы обработки Клиентов;
9) INITIALIZE_CUSTOMER_ADDRESS - сохранить во временную таблицу адреса;
10) INITIALIZE_CUST_CERTIFICATE - сохранить во временную таблицу удостоверения;
11) INITIALIZE_CUSTOMER_CONTACT - сохранить во временную таблицу контакты;
12) TRANSMIT_CUSTOMER - добавить записи Клиентов в целевую базу;
13) TRANSMIT_CUSTOMER_ADDRESS - добавить адреса в целевую базу;
14) TRANSMIT_CUSTOMER_CERTIFICATE - добавить удостоверения в целевую базу;
15) TRANSMIT_CUSTOMER_CONTACT - добавить контакты в целевую базу;
16) установит статус "Успех" для всех Клиентов в таблице обработки Клиентов 
(без относительно ошибок в процессе передачи данных, статус "Обработка завершена" будет более точным);
17) очистить временные таблицы;
18) выполнение передачи клиентов из базы RTL_B в базу RTL_A завершено.

Постановка задачи практически не устанавливает требовании к реализации, 
поэтому реализация выполнена на вкус исполнителя :)